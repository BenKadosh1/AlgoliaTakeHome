{"version":3,"sources":["pages/home/Home.js","components/navbar/Navbar.js","pages/search/Search.js","pages/discover/Discover.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","selection","handleClick","bind","val","this","setState","history","push","className","id","onClick","e","Component","Navbar","activeClassName","to","HomeTwoTone","searchClient","algoliasearch","Hit","src","hit","title","align","alt","Highlight","attribute","rating","Search","InstantSearch","indexName","SearchBox","Hits","hitComponent","Pagination","minDeviceWidth","Configure","hitsPerPage","maxDeviceWidth","ClearRefinements","RefinementList","App","exact","path","render","routeProps","Discover","Boolean","window","location","hostname","match","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4bc3586d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Home.css\";\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { selection: \"\" };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(val) {\r\n    this.setState({ selection: val }, function () {\r\n      this.props.history.push(`/${this.state.selection}`);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"HomeContainer\">\r\n        <div id=\"landing-header\">\r\n          <div>\r\n            <h1>Welcome to MovieSearch!</h1>\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <div>\r\n              <button onClick={(e) => this.handleClick(\"search\")}>\r\n                Search\r\n              </button>\r\n            </div>\r\n            <div>\r\n              <button onClick={(e) => this.handleClick(\"discover\")}>\r\n                Discover\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <ul className=\"slideshow\">\r\n          <li></li>\r\n          <li></li>\r\n          <li></li>\r\n          <li></li>\r\n          <li></li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { HomeTwoTone } from \"@ant-design/icons\";\r\nimport \"./Navbar.css\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"NavbarContainer\">\r\n        <div className=\"homeIcon\">\r\n          <NavLink activeClassName=\"active-link\" to=\"/\">\r\n            <strong>\r\n              <HomeTwoTone id=\"iconId\" />\r\n              MovieSearch\r\n            </strong>\r\n          </NavLink>\r\n        </div>\r\n        <div className=\"links\">\r\n          <NavLink activeClassName=\"active-link\" to=\"/search\">\r\n            <strong>Search</strong>\r\n          </NavLink>\r\n          <NavLink activeClassName=\"active-link\" to=\"/discover\">\r\n            <strong>Discover</strong>\r\n          </NavLink>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import algoliasearch from \"algoliasearch\";\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  InstantSearch,\r\n  Hits,\r\n  SearchBox,\r\n  Pagination,\r\n  Highlight,\r\n  Configure,\r\n} from \"react-instantsearch-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../discover/DiscoverSearch.css\";\r\nimport Navbar from \"../../components/navbar/Navbar\";\r\nimport MediaQuery from \"react-responsive\";\r\n\r\nconst searchClient = algoliasearch(\r\n  \"XTP58KH4GE\",\r\n  \"b00d93cc19c8253708b88d3c0bab04ea\" // search only API key, not admin API key\r\n);\r\n\r\nclass Search extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"PageContainer\">\r\n        <Navbar />\r\n        <div className=\"spacer\"></div>\r\n\r\n        <div className=\"ais-InstantSearch\">\r\n          <h1 className=\"headerTitleSearch\">\r\n            <strong>Search for all of your favorite movies!</strong>\r\n          </h1>\r\n          <InstantSearch indexName=\"movies_search\" searchClient={searchClient}>\r\n            <div className=\"main-panel\">\r\n              <SearchBox />\r\n              <Hits hitComponent={Hit} />\r\n              <Pagination />\r\n              <MediaQuery minDeviceWidth={1200}>\r\n                <Configure hitsPerPage={12} />\r\n              </MediaQuery>\r\n              <MediaQuery maxDeviceWidth={812}>\r\n                <Configure hitsPerPage={6} />\r\n              </MediaQuery>\r\n            </div>\r\n          </InstantSearch>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Hit(props) {\r\n  return (\r\n    <div>\r\n      <img\r\n        src={`https://source.unsplash.com/250x150/?${props.hit.title} movie`}\r\n        align=\"left\"\r\n        alt={props.hit.title}\r\n      />\r\n      <div className=\"hit-item\">\r\n        <strong>Title:</strong> <Highlight attribute=\"title\" hit={props.hit} />\r\n      </div>\r\n      <div className=\"hit-item\">\r\n        <strong>Genre(s):</strong>{\" \"}\r\n        <Highlight attribute=\"genre\" hit={props.hit} />\r\n      </div>\r\n      <div className=\"hit-item\">\r\n        <strong>Rating:</strong> {props.hit.rating}\r\n      </div>\r\n      <div className=\"hit-item\">\r\n        <strong>Actor(s):</strong>{\" \"}\r\n        <Highlight attribute=\"actors\" hit={props.hit} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nHit.propTypes = {\r\n  hit: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Search;\r\n","import algoliasearch from \"algoliasearch\";\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  InstantSearch,\r\n  Hits,\r\n  SearchBox,\r\n  Pagination,\r\n  Highlight,\r\n  ClearRefinements,\r\n  RefinementList,\r\n  Configure,\r\n} from \"react-instantsearch-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./DiscoverSearch.css\";\r\nimport Navbar from \"../../components/navbar/Navbar\";\r\nimport MediaQuery from \"react-responsive\";\r\n\r\nconst searchClient = algoliasearch(\r\n  \"XTP58KH4GE\",\r\n  \"b00d93cc19c8253708b88d3c0bab04ea\" // search only API key, not admin API key\r\n);\r\n\r\nclass Search extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"PageContainer\">\r\n        <Navbar />\r\n        <div className=\"spacer\"></div>\r\n\r\n        <div className=\"ais-InstantSearch\">\r\n          <h1 className=\"headerTitle\">\r\n            <strong>Discover the perfect movie for you!</strong>\r\n          </h1>\r\n          <InstantSearch\r\n            indexName=\"movies_discover\"\r\n            searchClient={searchClient}\r\n          >\r\n            <div className=\"left-panel\">\r\n              <MediaQuery maxDeviceWidth={812}>\r\n                <SearchBox />\r\n              </MediaQuery>\r\n              <ClearRefinements />\r\n              <h2>Genre</h2>\r\n              <RefinementList attribute=\"genre\" />\r\n              <h2>Rating</h2>\r\n              <RefinementList attribute=\"rating\" />\r\n              <MediaQuery minDeviceWidth={1200}>\r\n                <Configure hitsPerPage={12} />\r\n              </MediaQuery>\r\n              <MediaQuery maxDeviceWidth={812}>\r\n                <Configure hitsPerPage={6} />\r\n              </MediaQuery>\r\n            </div>\r\n            <div className=\"right-panel\">\r\n              <MediaQuery minDeviceWidth={1200}>\r\n                <SearchBox />\r\n              </MediaQuery>\r\n              <Hits hitComponent={Hit} />\r\n              <Pagination />\r\n            </div>\r\n          </InstantSearch>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Hit(props) {\r\n  return (\r\n    <div>\r\n      <img\r\n        src={`https://source.unsplash.com/250x150/?${props.hit.title} movie`}\r\n        align=\"left\"\r\n        alt={props.hit.title}\r\n      />\r\n      <div className=\"hit-item\">\r\n        <strong>Title:</strong> <Highlight attribute=\"title\" hit={props.hit} />\r\n      </div>\r\n      <div className=\"hit-item\">\r\n        <strong>Genre(s):</strong>{\" \"}\r\n        <Highlight attribute=\"genre\" hit={props.hit} />\r\n      </div>\r\n      <div className=\"hit-item\">\r\n        <strong>Rating:</strong> {props.hit.rating}\r\n      </div>\r\n      <div className=\"hit-item\">\r\n        <strong>Actor(s):</strong>{\" \"}\r\n        <Highlight attribute=\"actors\" hit={props.hit} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nHit.propTypes = {\r\n  hit: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/home/Home\";\nimport Search from \"./pages/search/Search\";\nimport Discover from \"./pages/discover/Discover\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={(routeProps) => <Home {...routeProps} />}\n        />\n        <Route\n          exact\n          path=\"/search\"\n          render={(routeProps) => <Search {...routeProps} />}\n        />\n        <Route\n          exact\n          path=\"/discover\"\n          render={(routeProps) => <Discover {...routeProps} />}\n        />\n        <Route render={() => <h1>Error - this page cannot be found!</h1>} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <HashRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </HashRouter>,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}